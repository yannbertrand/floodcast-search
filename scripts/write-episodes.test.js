import { describe, expect, it } from 'vitest';
import {
	getEpisodeDestinationFilePath,
	getEpisodeInfoFilePath,
	getEpisodeLinesFromVtt,
	getEpisodeMetadataFromYtDlpEpisodeInfo,
	getEpisodeSubtitleFilePath,
} from './write-episodes.ts';

describe('getEpisodeInfoFilePath', () => {
	it('should return correct filepath', () => {
		expect(getEpisodeInfoFilePath('test')).toMatchInlineSnapshot(
			`"data/yt-dlp/info/test.info.json"`,
		);
	});
});

describe('getEpisodeSubtitleFilePath', () => {
	it('should return correct filepath', () => {
		expect(getEpisodeSubtitleFilePath('test')).toMatchInlineSnapshot(
			`"data/subtitles/test.vtt"`,
		);
	});
});

describe('getEpisodeDestinationFilePath', () => {
	it('should return correct filepath', () => {
		expect(getEpisodeDestinationFilePath('test')).toMatchInlineSnapshot(
			`"data/episodes/test.json"`,
		);
	});
});

describe('getEpisodeLinesFromVtt', () => {
	const vttContent = `WEBVTT - Generated by https://sindresorhus.com/aiko

00:00.000 --> 00:01.500
Il s'agit du FloodCast

00:01.500 --> 00:02.500
Ça pue la merde !

00:02.500 --> 00:06.500
Oui !

01:02:00.080 --> 01:02:01.080
On part sur un jingle.`;

	it('should return an array', () => {
		expect(getEpisodeLinesFromVtt(vttContent)).toBeInstanceOf(Array);
	});

	it('should return one object per lines', () => {
		expect(getEpisodeLinesFromVtt(vttContent)).toHaveLength(4);
	});

	describe('line', () => {
		it('content', () => {
			expect(getEpisodeLinesFromVtt(vttContent)[0]).toHaveProperty(
				'content',
				"Il s'agit du FloodCast",
			);
			expect(getEpisodeLinesFromVtt(vttContent)[1]).toHaveProperty(
				'content',
				'Ça pue la merde !',
			);
			expect(getEpisodeLinesFromVtt(vttContent)[2]).toHaveProperty(
				'content',
				'Oui !',
			);
			expect(getEpisodeLinesFromVtt(vttContent)[3]).toHaveProperty(
				'content',
				'On part sur un jingle.',
			);
		});

		describe('start', () => {
			it('should contain startString', () => {
				expect(getEpisodeLinesFromVtt(vttContent)[0]).toHaveProperty(
					'startString',
					'00:00.000',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[1]).toHaveProperty(
					'startString',
					'00:01.500',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[2]).toHaveProperty(
					'startString',
					'00:02.500',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[3]).toHaveProperty(
					'startString',
					'01:02:00.080',
				);
			});

			it('should contain start as down rounded number', () => {
				expect(getEpisodeLinesFromVtt(vttContent)[0]).toHaveProperty(
					'start',
					0,
				);
				expect(getEpisodeLinesFromVtt(vttContent)[1]).toHaveProperty(
					'start',
					1,
				);
				expect(getEpisodeLinesFromVtt(vttContent)[2]).toHaveProperty(
					'start',
					2,
				);
				expect(getEpisodeLinesFromVtt(vttContent)[3]).toHaveProperty(
					'start',
					Math.floor(0.08 + 0 + 2 * 60 + 1 * 60 * 60),
				);
			});
		});

		describe('end', () => {
			it('should contain endString', () => {
				expect(getEpisodeLinesFromVtt(vttContent)[0]).toHaveProperty(
					'endString',
					'00:01.500',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[1]).toHaveProperty(
					'endString',
					'00:02.500',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[2]).toHaveProperty(
					'endString',
					'00:06.500',
				);
				expect(getEpisodeLinesFromVtt(vttContent)[3]).toHaveProperty(
					'endString',
					'01:02:01.080',
				);
			});

			it('should contain end as rounded up number', () => {
				expect(getEpisodeLinesFromVtt(vttContent)[0]).toHaveProperty('end', 2);
				expect(getEpisodeLinesFromVtt(vttContent)[1]).toHaveProperty('end', 3);
				expect(getEpisodeLinesFromVtt(vttContent)[2]).toHaveProperty('end', 7);
				expect(getEpisodeLinesFromVtt(vttContent)[3]).toHaveProperty(
					'end',
					Math.ceil(0.08 + 1 + 2 * 60 + 1 * 60 * 60),
				);
			});
		});
	});
});

describe('#getEpisodeMetadataFromYtDlpEpisodeInfo', () => {
	const sampleEpisode = {
		title: 'S10E05 - Folkloriste Professionnel',
		webpage_url:
			'https://sphinx.acast.com/p/open/s/5ffe3facad3e633276e9ea57/e/670afa3c092cc24098db3148/media.mp3#__youtubedl_smuggle=%7B%22force_videoid%22%3A+%22670afa3c092cc24098db3148%22%7D',
		description:
			"<p>Avec Manon Bril et Patrick Baud. </p><br><p>Présenté par Florent Bernard et Adrien Ménielle.&nbsp;</p><br><p>On en parle de choses dans cet épisode : de folkloriste, de faire du sport, de bêtises d'enfants, de petites maisons dans des lieux insolites, de fêter son anniversaire, de chercher un trésor, d'opération chirurgicales et de Michel Blanc. </p><br><p>Tu peux nous laisser des bonnes notes sur ta plateforme d'écoute et/ou en parler autour de toi, le bouche-à-oreille, c'est toujours chanmé !&nbsp;</p><br><p>Bises,</p><p>Flo.&nbsp;</p>",
		duration: 6583.0,
		duration_string: '1:49:43',
		timestamp: 1728871240,
		upload_date: '20241014',
	};

	describe('season number', () => {
		it('should set seasonNumber from season_number if given', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					...sampleEpisode,
					season_number: 10,
				}),
			).toHaveProperty('seasonNumber', 10);
		});

		it('should set seasonNumber from title if no season_number given', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('seasonNumber', 10);
		});

		it('should throw if no season number found', () => {
			expect(() =>
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					title: "Il s'agissait du Floodcast",
				}),
			).toThrowErrorMatchingInlineSnapshot(
				`[Error: Les infos de l'épisode n'ont pas pu être trouvées dans son titre : saison, épisode, titre]`,
			);
		});
	});

	describe('episode number', () => {
		it('should set episodeNumber from episode_number if given', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					...sampleEpisode,
					episode_number: 5,
				}),
			).toHaveProperty('episodeNumber', 5);
		});

		it('should set episodeNumber from title if no episode_number given', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('episodeNumber', 5);
		});

		it('should throw if no season number found', () => {
			expect(() =>
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					title: "Il s'agissait du Floodcast",
				}),
			).toThrowErrorMatchingInlineSnapshot(
				`[Error: Les infos de l'épisode n'ont pas pu être trouvées dans son titre : saison, épisode, titre]`,
			);
		});
	});

	describe('code', () => {
		it('should set code from title', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('code', 'S10E05');
		});

		it('should throw if no season number found', () => {
			expect(() =>
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					title: "Il s'agissait du Floodcast",
				}),
			).toThrowErrorMatchingInlineSnapshot(
				`[Error: Les infos de l'épisode n'ont pas pu être trouvées dans son titre : saison, épisode, titre]`,
			);
		});
	});

	describe('title', () => {
		it('should write title if can destructure', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('title', 'Folkloriste Professionnel');
		});

		it('should throw if cannot destructure title', () => {
			expect(() =>
				getEpisodeMetadataFromYtDlpEpisodeInfo({
					title: "Il s'agissait du Floodcast",
				}),
			).toThrowErrorMatchingInlineSnapshot(
				`[Error: Les infos de l'épisode n'ont pas pu être trouvées dans son titre : saison, épisode, titre]`,
			);
		});
	});

	describe('acast url', () => {
		it('should set acastUrl from webpage_url', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('acastUrl', sampleEpisode.webpage_url);
		});
	});

	describe('description', () => {
		it('should set description', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('description', sampleEpisode.description);
		});
	});

	describe('duration', () => {
		it('should set duration', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('duration', sampleEpisode.duration);
		});
	});

	describe('duration string', () => {
		it('should set durationString', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('durationString', sampleEpisode.duration_string);
		});
	});

	describe('upload timestamp', () => {
		it('should set uploadTimestamp', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('uploadTimestamp', sampleEpisode.timestamp);
		});
	});

	describe('upload date', () => {
		it('should set uploadDate', () => {
			expect(
				getEpisodeMetadataFromYtDlpEpisodeInfo({ ...sampleEpisode }),
			).toHaveProperty('uploadDate', '2024-10-14');
		});
	});
});
