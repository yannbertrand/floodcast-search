<form id="searchbox" role="search" action="" novalidate></form>
<div id="hits" class="hits"></div>

<script>
import algolia from '@services/algolia.service.ts';
import type { InstantSearchStatus } from 'instantsearch.js/es/types/instantsearch.d.ts';
import connectSearchBox, { type SearchBoxRenderState } from 'instantsearch.js/es/connectors/search-box/connectSearchBox';
import { getContainerNode } from 'instantsearch.js/es/lib/utils/getContainerNode';
import { infiniteHits } from 'instantsearch.js/es/widgets';
import type { SearchBoxWidgetParams } from 'instantsearch.js/es/widgets/search-box/search-box';

function renderSearchBox  (
    renderOptions: SearchBoxRenderState & { instantSearchInstance: { status: InstantSearchStatus }} & { widgetParams: SearchBoxWidgetParams },
    isFirstRender: boolean
) {
    const { query, refine, instantSearchInstance, widgetParams } = renderOptions;
    const container = getContainerNode(widgetParams.container);
    const isSearchStalled = instantSearchInstance.status === 'stalled';

    if (isFirstRender) {
        const input = document.createElement('input');
        input.setAttribute('type', 'search');
        input.setAttribute('placeholdertype', '');
        input.setAttribute('autocompletetype', 'off');
        input.setAttribute('autocorrect', 'off');
        input.setAttribute('autocapitalizetype', 'none');
        input.setAttribute('spellchecktype', 'false');
        input.setAttribute('maxLengthtype', '512');
        input.setAttribute('aria-label', 'Rechercher');

        const loadingIndicator = document.createElement('h2');
        loadingIndicator.textContent = 'Chargement…';

        input.addEventListener('input', (event) => {
            refine((event.currentTarget as HTMLInputElement).value);
        });

        container.appendChild(input);
        container.appendChild(loadingIndicator);
    }

    (container.querySelector('input') as HTMLInputElement).value = query;
    (container.querySelector('h2') as HTMLSpanElement).hidden = !isSearchStalled;
};

const customSearchBox = connectSearchBox(renderSearchBox);

algolia.addWidgets([
    customSearchBox({
        container: '#searchbox'
    }),

    infiniteHits({
        container: '#hits',
        cssClasses: {
            list: 'list-episodes'
        },
        templates: {
            showMoreText: () => 'Voir plus',
            showPreviousText: () => 'Voir moins',
            empty: () => '<h2>Pas de résultats</h2>',
            item(hit, { html, components }) {
                return html`<article>
                    <h2 class="title">...${components.Highlight({ hit, attribute: 'content' })}...</h2>
                    <p>${components.Highlight({ hit, attribute: 'episode.title' })}</p>
                </article>`;
            },
        },
    }),
]);

algolia.start();
</script>

<style is:global>
.hits {
    margin-bottom: var(--pico-spacing);
}
.list-episodes {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--pico-spacing);
    list-style: none;
    padding: 0;

    & .title {
        --pico-font-size: 1.125rem;
        --pico-line-height: 1.225;
        --pico-typography-spacing-top: 1.6875rem;
    }
}
</style>
