---
import SearchBox from '@components/SearchBox.astro';
---
<div id="searchbox">
    <SearchBox />
</div>

<div class="content">
    <div class="facets">
        <h2>Saison</h2>
        <div id="season"></div>
    </div>

    <div id="hits" class="hits"></div>
</div>

<script>
import algolia from '@services/algolia.service.ts';
import type { InstantSearchStatus } from 'instantsearch.js/es/types/instantsearch.d.ts';
import connectSearchBox, { type SearchBoxRenderState } from 'instantsearch.js/es/connectors/search-box/connectSearchBox';
import { getContainerNode } from 'instantsearch.js/es/lib/utils/getContainerNode';
import { infiniteHits } from 'instantsearch.js/es/widgets';
import type { SearchBoxWidgetParams } from 'instantsearch.js/es/widgets/search-box/search-box';
import { refinementList } from "instantsearch.js/es/widgets";

function renderSearchBox  (
    renderOptions: SearchBoxRenderState & { instantSearchInstance: { status: InstantSearchStatus }} & { widgetParams: SearchBoxWidgetParams },
    isFirstRender: boolean
) {
    const { query, refine, instantSearchInstance, widgetParams } = renderOptions;
    const container = getContainerNode(widgetParams.container);
    const isSearchStalled = instantSearchInstance.status === 'stalled';
    const input = container.querySelector('input') as HTMLInputElement;

    if (isFirstRender) {
        input.addEventListener('input', (event) => {
            refine((event.currentTarget as HTMLInputElement).value);
        });
    }

    input.value = query;
    if (isSearchStalled) {
        input.classList.add('loading');
    } else {
        input.classList.remove('loading');
    }
};

const customSearchBox = connectSearchBox(renderSearchBox);

algolia.addWidgets([
    customSearchBox({
        container: '#searchbox'
    }),

    refinementList({
        container: "#season",
        attribute: 'episode.seasonNumber',
        cssClasses: {
            list: 'list-seasons'
        },
        templates: {
            item(item, { html }) {
                const { label, count, isRefined } = item;

                return html`
                    <input type="checkbox" class="ais-RefinementList-checkbox" checked="${isRefined}" />
                    <span class="ais-RefinementList-labelText">Saison ${label}</span>
                    <span class="ais-RefinementList-count"> (${count})</span>
                `
            }
        }
    }),

    infiniteHits({
        container: '#hits',
        cssClasses: {
            list: 'list-episodes'
        },
        templates: {
            showMoreText: () => 'Voir plus',
            showPreviousText: () => 'Voir moins',
            empty: () => '<h2>Pas de résultats</h2>',
            item(hit, { html, components }) {
                const code = html`S${`${hit.episode.seasonNumber}`.padStart(2, '0')}E${`${hit.episode.episodeNumber}`.padStart(2, '0')}`
                return html`<article>
                    <h2 class="title">${components.Highlight({ hit, attribute: 'episode.title' })} <small>${code}</small></h2>
                    <p>...${components.Highlight({ hit, attribute: 'content' })}...</p>
                </article>`;
            },
        },
    }),
]);

algolia.start();
</script>

<style is:global>
.content {
    display: flex;
    flex-wrap: wrap;
    gap: var(--pico-spacing);
}
.facets {
    flex-shrink: 0;
    flex-basis: 200px;
}
.list-seasons {
    padding: 0;
}
.list-seasons li::marker {
    content: '';
}
.hits {
    margin-bottom: var(--pico-spacing);
    flex: 1;
}
.list-episodes {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--pico-spacing);
    list-style: none;
    padding: 0;

    & .title {
        --pico-font-size: 1rem;
        --pico-line-height: 1.25;
        --pico-typography-spacing-top: 1.5rem;
        color: var(--pico-muted-color);

        display: flex;
        justify-content: space-between;
        align-items: baseline;
        gap: calc(var(--pico-spacing) / 2);
    }
}
</style>
